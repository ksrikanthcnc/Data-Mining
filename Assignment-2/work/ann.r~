#--------------------------------------------------------------------
#library(doMC)
#library(doParallel)
#registerDoMC(cores=3)

while (dev.cur() > 1) dev.off()
rm(list = ls())
matr <- function(model){
  predicted <- predict(model, test)
#  pred=ifelse((predicted<1.5), 1,2)
  pred=ifelse((predicted == "Low"), 1,2)
  #print(confusionMatrix(pred, test$income ))
  conf <- table(pred,test$income)
  cat("Confusion Matrix","\n")
  print(conf)
  acc <- sum(diag(conf))/sum(conf)
  r <- conf[1,1]/sum(conf[1,])
  p <- conf[1,1]/sum(conf[,1])
  cat("Accuracy",sum(diag(conf))/sum(conf),"\n")
  cat("Recall",conf[1,1]/sum(conf[1,]),"\n")
  cat("Precision",conf[1,1]/sum(conf[,1]),"\n")
  cat("F-Score",(2*r*p)/(r+p),"\n")
  pred <- predict(model, test, type = 'raw')
  auc<-auc(test$income,pred)
  plot(roc(test$income,pred))
  cat("AUC",auc,"\n")
}
matri <- function(model){
  predicted <- predict(model, test)
  #pred=ifelse((predicted=="Low"), 1,2)
  pred <- predicted
  #print(confusionMatrix(pred, test$income ))
  conf <- table(pred,test$income)
  cat("Confusion Matrix","\n")
  print(conf)
  acc <- sum(diag(conf))/sum(conf)
  r <- conf[1,1]/sum(conf[1,])
  p <- conf[1,1]/sum(conf[,1])
  cat("Accuracy",sum(diag(conf))/sum(conf),"\n")
  cat("Recall",conf[1,1]/sum(conf[1,]),"\n")
  cat("Precision",conf[1,1]/sum(conf[,1]),"\n")
  cat("F-Score",(2*r*p)/(r+p),"\n")
  pred <- predict(model, test)
  auc<-auc(test$income,as.numeric(pred))
  plot(roc(test$income,as.numeric(pred)))
  cat("AUC",auc,"\n")
}
library(readr)
library(rpart)
library(rpart.plot)
library(caret)
library(pROC)
library(neuralnet)
data <- read_csv("finalfact.csv")
data <- data[1:1000,]

data[sapply(data, is.character)] <- lapply(data[sapply(data, is.character)], as.factor)
data[sapply(data, is.numeric)] <- lapply(data[sapply(data, is.numeric)], scale)
#View(data)
f <- as.formula(paste(" ~", paste(names(data), collapse = " + ")))
m <- model.matrix( f,data = data)
d <- as.data.frame(m)
#View(d$`(Intercept)`)
#View(d)
d$`(Intercept)` <- NULL
intrain <- createDataPartition(y = d$income, p = 0.8, list = FALSE)
train <- d[intrain,]
test <- d[-intrain,]
#View(d)
n <- names(d)
f <- as.formula(paste("incomeLow~", paste(sprintf("`%s`", n[!n %in% "incomeLow"]), collapse="+")))
ann <- neuralnet( f,data=train,hidden=c(0),
                  lifesign = 'full',
                  threshold=0.1)

plot(ann)

predicted_ <- compute(ann, test[,1:length(test)-1], rep = 1)
#summary(predicted_$net.result)
predicted <- predicted_
predicted <- ifelse( predicted_$net.result < 0, 0,1)
cat("Confusion Matrix","\n")
conf <- table(predicted,test$income)
print(conf)
acc <- sum(diag(conf))/sum(conf)
cat("Accuracy",acc,"\n")
rec <- conf[1,1]/sum(conf[1,])
cat("Recall",rec,"\n")
pre <- conf[1,1]/sum(conf[,1])
cat("Precision",pre,"\n")
f_s <- 2*conf[1,1]/(2*conf[1,1] + conf[1,2] + conf[2,1])
cat("F_Score",f_s,"\n")

auc<-auc(test$income,predicted)
plot(roc(test$income,predicted))
cat("AUC",auc,"\n")



