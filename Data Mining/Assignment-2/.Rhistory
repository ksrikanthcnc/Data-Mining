train <- d[intrain,]
test <- d[-intrain,]
#View(d)
n <- names(d)
f <- as.formula(paste("incomeLow~", paste(sprintf("`%s`", n[!n %in% "incomeLow"]), collapse="+")))
folds <- createFolds(y = data$income,k = 10)
dim(data)
split_up <- lapply(folds, function(ind, dat) dat[ind,], dat = data)
dim(data)
unlist(lapply(split_up, nrow))
folds
train <- data[folds,]
train <- data[c(folds),]
ind <- folds$Fold01
train <- data[ind == 1]
train <- data[ind == 1,]
data$ind <- folds$Fold01
train <- data[ind == 1,]
data$ind <- folds$Fold01
train <- data[ind == 1,]
ind <- folds$Fold01
ind
train <- data[ind,]
test <- data[ind,]
train <- data[-ind,]
ind <- folds$Fold01
test <- data[ind,]
train <- data[-ind,]
ind <- folds[[1]]
ind <- folds[[111]]
ann <- neuralnet( f,data=train,hidden=c(0),
lifesign = 'full',
threshold=0.1)
data <- read_csv("finalfact.csv")
data <- data[1:1000,]
data[sapply(data, is.character)] <- lapply(data[sapply(data, is.character)], as.factor)
data[sapply(data, is.numeric)] <- lapply(data[sapply(data, is.numeric)], scale)
#View(data)
f <- as.formula(paste(" ~", paste(names(data), collapse = " + ")))
m <- model.matrix( f,data = data)
d <- as.data.frame(m)
#View(d$`(Intercept)`)
#View(d)
d$`(Intercept)` <- NULL
intrain <- createDataPartition(y = d$income, p = 0.8, list = FALSE)
train <- d[intrain,]
test <- d[-intrain,]
#View(d)
n <- names(d)
f <- as.formula(paste("incomeLow~", paste(sprintf("`%s`", n[!n %in% "incomeLow"]), collapse="+")))
for (i in 1:10) {
ind <- folds[[i]]
test <- data[ind,]
train <- data[-ind,]
ann <- neuralnet( f,data=train,hidden=c(0),
lifesign = 'full',
threshold=0.1)
}
data <- read_csv("finalfact.csv")
data <- data[1:1000,]
data[sapply(data, is.character)] <- lapply(data[sapply(data, is.character)], as.factor)
data[sapply(data, is.numeric)] <- lapply(data[sapply(data, is.numeric)], scale)
#View(data)
f <- as.formula(paste(" ~", paste(names(data), collapse = " + ")))
m <- model.matrix( f,data = data)
d <- as.data.frame(m)
#View(d$`(Intercept)`)
#View(d)
d$`(Intercept)` <- NULL
intrain <- createDataPartition(y = d$income, p = 0.8, list = FALSE)
train <- d[intrain,]
test <- d[-intrain,]
#View(d)
n <- names(d)
f <- as.formula(paste("incomeLow~", paste(sprintf("`%s`", n[!n %in% "incomeLow"]), collapse="+")))
ann <- neuralnet( f,data=train,hidden=c(0),
lifesign = 'full',
threshold=0.1)
while (dev.cur() > 1) dev.off()
rm(list = ls())
data <- read_csv("finalfact.csv")
data <- data[1:1000,]
data[sapply(data, is.character)] <- lapply(data[sapply(data, is.character)], as.factor)
data[sapply(data, is.numeric)] <- lapply(data[sapply(data, is.numeric)], scale)
#View(data)
f <- as.formula(paste(" ~", paste(names(data), collapse = " + ")))
m <- model.matrix( f,data = data)
d <- as.data.frame(m)
#View(d$`(Intercept)`)
#View(d)
d$`(Intercept)` <- NULL
intrain <- createDataPartition(y = d$income, p = 0.8, list = FALSE)
train <- d[intrain,]
test <- d[-intrain,]
#View(d)
n <- names(d)
f <- as.formula(paste("incomeLow~", paste(sprintf("`%s`", n[!n %in% "incomeLow"]), collapse="+")))
ind <- folds[[i]]
folds <- createFolds(y = data$income,k =10)
folds
ind <- folds[[i]]
for (i in 1:10) {
ind <- folds[[i]]
test <- data[ind,]
train <- data[-ind,]
ann <- neuralnet( f,data=train,hidden=c(0),
lifesign = 'full',
threshold=0.1)
}
ann <- neuralnet( f,data=train,hidden=c(0),
lifesign = 'full',
threshold=0.1)
#View(d)
n <- names(d)
f <- as.formula(paste("incomeLow~", paste(sprintf("`%s`", n[!n %in% "incomeLow"]), collapse="+")))
ann <- neuralnet( f,data=train,hidden=c(0),
lifesign = 'full',
threshold=0.1)
data <- read_csv("finalfact.csv")
data <- data[1:1000,]
data[sapply(data, is.character)] <- lapply(data[sapply(data, is.character)], as.factor)
data[sapply(data, is.numeric)] <- lapply(data[sapply(data, is.numeric)], scale)
#View(data)
f <- as.formula(paste(" ~", paste(names(data), collapse = " + ")))
m <- model.matrix( f,data = data)
d <- as.data.frame(m)
#View(d$`(Intercept)`)
#View(d)
d$`(Intercept)` <- NULL
intrain <- createDataPartition(y = d$income, p = 0.8, list = FALSE)
train <- d[intrain,]
test <- d[-intrain,]
#View(d)
n <- names(d)
f <- as.formula(paste("incomeLow~", paste(sprintf("`%s`", n[!n %in% "incomeLow"]), collapse="+")))
ann <- neuralnet( f,data=train,hidden=c(0),
lifesign = 'full',
threshold=0.1)
ann <- neuralnet( f,data=train,hidden=c(0),
lifesign = 'full',
threshold=0.1)
data <- read_csv("finalfact.csv")
data <- data[1:1000,]
data[sapply(data, is.character)] <- lapply(data[sapply(data, is.character)], as.factor)
data[sapply(data, is.numeric)] <- lapply(data[sapply(data, is.numeric)], scale)
#View(data)
f <- as.formula(paste(" ~", paste(names(data), collapse = " + ")))
m <- model.matrix( f,data = data)
d <- as.data.frame(m)
#View(d$`(Intercept)`)
#View(d)
d$`(Intercept)` <- NULL
intrain <- createDataPartition(y = d$income, p = 0.8, list = FALSE)
train <- d[intrain,]
test <- d[-intrain,]
#View(d)
n <- names(d)
f <- as.formula(paste("incomeLow~", paste(sprintf("`%s`", n[!n %in% "incomeLow"]), collapse="+")))
folds <- createFolds(y = data$income,k =10)
for (i in 1:10) {
ind <- folds[[i]]
test <- data[ind,]
train <- data[-ind,]
ann <- neuralnet( f,data=train,hidden=c(0),
lifesign = 'full',
threshold=0.1)
}
data <- read_csv("finalfact.csv")
data <- data[1:1000,]
data[sapply(data, is.character)] <- lapply(data[sapply(data, is.character)], as.factor)
data[sapply(data, is.numeric)] <- lapply(data[sapply(data, is.numeric)], scale)
#View(data)
f <- as.formula(paste(" ~", paste(names(data), collapse = " + ")))
m <- model.matrix( f,data = data)
d <- as.data.frame(m)
#View(d$`(Intercept)`)
#View(d)
d$`(Intercept)` <- NULL
intrain <- createDataPartition(y = d$income, p = 0.8, list = FALSE)
train <- d[intrain,]
test <- d[-intrain,]
#View(d)
n <- names(d)
f <- as.formula(paste("incomeLow~", paste(sprintf("`%s`", n[!n %in% "incomeLow"]), collapse="+")))
ann <- neuralnet( f,data=train,hidden=c(0),
lifesign = 'full',
threshold=0.1)
ann <- neuralnet( f,data=train,hidden=c(0),
lifesign = 'full',
threshold=0.1)
ind <- folds[[1]]
ind
test <- data[ind,]
train <- data[-ind,]
ann <- neuralnet( f,data=train,hidden=c(0),
lifesign = 'full',
threshold=0.1)
train
for (i in 1:10) {
ind <- folds[[1]]
test <- d[ind,]
train <- d[-ind,]
ann <- neuralnet( f,data=train,hidden=c(0),
lifesign = 'full',
threshold=0.1)
}
ann$covariate
max <- ifelse(auc > max,auc,max)
max <- ifelse((auc > max),auc,max)
auc<-auc(test$income,predicted)
ann <- neuralnet( f,data=train,hidden=c(0),
lifesign = 'full',
threshold=0.1)
predicted_ <- compute(ann, test[,1:length(test)-1], rep = 1)
predicted <- predicted_
predicted <- ifelse( predicted_$net.result < 0, 0,1)
conf <- table(predicted,test$income)
auc<-auc(test$income,predicted)
auc<-auc(test$income,predicted)
ann <- neuralnet( f,data=train,hidden=c(0),
lifesign = 'full',
threshold=0.1)
predicted_ <- compute(ann, test[,1:length(test)-1], rep = 1)
#summary(predicted_$net.result)
predicted <- predicted_
predicted <- ifelse( predicted_$net.result < 0, 0,1)
cat("Confusion Matrix","\n")
conf <- table(predicted,test$income)
print(conf)
auc<-auc(test$income,predicted)
plot(roc(test$income,predicted))
cat("AUC",auc,"\n")
auc<-auc(test$income,predicted)
annmax <- if((auc > max),ann)
ann <- neuralnet( f,data=train,hidden=c(0),
lifesign = 'full',
threshold=0.1)
predicted_ <- compute(ann, test[,1:length(test)-1], rep = 1)
predicted <- predicted_
predicted <- ifelse( predicted_$net.result < 0, 0,1)
conf <- table(predicted,test$income)
auc<-auc(test$income,predicted)
annmax <- if((auc > max),ann)
annmax <- if((auc > max)ann)
annmax <- if(auc > max),ann
annmax <- if(auc > max)(ann)
for (i in 1:10) {
ind <- folds[[1]]
test <- d[ind,]
train <- d[-ind,]
ann <- neuralnet( f,data=train,hidden=c(0),
lifesign = 'full',
threshold=0.1)
predicted_ <- compute(ann, test[,1:length(test)-1], rep = 1)
predicted <- predicted_
predicted <- ifelse( predicted_$net.result < 0, 0,1)
conf <- table(predicted,test$income)
auc<-auc(test$income,predicted)
if(auc > max){
annmax <- ann
max = auc
}
}
for (i in 1:10) {
ind <- folds[[1]]
test <- d[ind,]
train <- d[-ind,]
ann <- neuralnet( f,data=train,hidden=c(0),
lifesign = 'full',
threshold=0.1)
predicted_ <- compute(ann, test[,1:length(test)-1], rep = 1)
predicted <- predicted_
predicted <- ifelse( predicted_$net.result < 0, 0,1)
conf <- table(predicted,test$income)
auc<-auc(test$income,predicted)
if(auc >= max){
annmax <- ann
max = auc
}
}
z <- ifelse((auc > max),1,0)
if(auc >= z){
annmax <- ann
max = auc
}
if(auc >= max){
annmax <- ann
max = auc
}
auc
max
maxi=0
for (i in 1:10) {
ind <- folds[[1]]
test <- d[ind,]
train <- d[-ind,]
ann <- neuralnet( f,data=train,hidden=c(0),
lifesign = 'full',
threshold=0.1)
predicted_ <- compute(ann, test[,1:length(test)-1], rep = 1)
predicted <- predicted_
predicted <- ifelse( predicted_$net.result < 0, 0,1)
conf <- table(predicted,test$income)
auc<-auc(test$income,predicted)
z <- ifelse((auc > max),1,0)
if(auc >= maxi){
annmax <- ann
max = auc
}
}
if(auc >= maxi){
annmax <- ann
max = auc
}
for (i in 1:10) {
ind <- folds[[1]]
test <- d[ind,]
train <- d[-ind,]
ann <- neuralnet( f,data=train,hidden=c(0),
lifesign = 'full',
threshold=0.1)
predicted_ <- compute(ann, test[,1:length(test)-1], rep = 1)
predicted <- predicted_
predicted <- ifelse( predicted_$net.result < 0, 0,1)
conf <- table(predicted,test$income)
auc<-auc(test$income,predicted)
if(auc >= maxi){
annmax <- ann
max = auc
}
}
annmax
plot(annmax)
data <- read_csv("finalfact.csv")
data <- data[1:1000,]
data[sapply(data, is.character)] <- lapply(data[sapply(data, is.character)], as.factor)
data[sapply(data, is.numeric)] <- lapply(data[sapply(data, is.numeric)], scale)
#View(data)
f <- as.formula(paste(" ~", paste(names(data), collapse = " + ")))
m <- model.matrix( f,data = data)
d <- as.data.frame(m)
#View(d$`(Intercept)`)
#View(d)
d$`(Intercept)` <- NULL
intrain <- createDataPartition(y = d$income, p = 0.8, list = FALSE)
train <- d[intrain,]
test <- d[-intrain,]
#View(d)
n <- names(d)
f <- as.formula(paste("incomeLow~", paste(sprintf("`%s`", n[!n %in% "incomeLow"]), collapse="+")))
folds <- createFolds(y = data$income,k =10)
maxi=0
for (i in 1:10) {
ind <- folds[[1]]
test <- d[ind,]
train <- d[-ind,]
ann <- neuralnet( f,data=train,hidden=c(0),
lifesign = 'full',
threshold=0.1)
predicted_ <- compute(ann, test[,1:length(test)-1], rep = 1)
predicted <- predicted_
predicted <- ifelse( predicted_$net.result < 0, 0,1)
conf <- table(predicted,test$income)
auc<-auc(test$income,predicted)
if(auc >= maxi){
annmax <- ann
max = auc
}
}
annmax
plot(annmax)
ann <- annamx
predicted_ <- compute(ann, test[,1:length(test)-1], rep = 1)
#summary(predicted_$net.result)
predicted <- predicted_
predicted <- ifelse( predicted_$net.result < 0, 0,1)
cat("Confusion Matrix","\n")
conf <- table(predicted,test$income)
print(conf)
acc <- sum(diag(conf))/sum(conf)
cat("Accuracy",acc,"\n")
rec <- conf[1,1]/sum(conf[1,])
cat("Recall",rec,"\n")
pre <- conf[1,1]/sum(conf[,1])
cat("Precision",pre,"\n")
f_s <- 2*conf[1,1]/(2*conf[1,1] + conf[1,2] + conf[2,1])
cat("F_Score",f_s,"\n")
auc<-auc(test$income,predicted)
plot(roc(test$income,predicted))
plot(roc(test$income,predicted))
cat("AUC",auc,"\n")
for (i in 1:10) {
ind <- folds[[1]]
test <- d[ind,]
train <- d[-ind,]
ann <- neuralnet( f,data=train,hidden=c(6,7,6),
lifesign = 'full',
threshold=0.1)
predicted_ <- compute(ann, test[,1:length(test)-1], rep = 1)
predicted <- predicted_
predicted <- ifelse( predicted_$net.result < 0, 0,1)
conf <- table(predicted,test$income)
auc<-auc(test$income,predicted)
if(auc >= maxi){
annmax <- ann
max = auc
}
}
for (i in 1:10) {
ind <- folds[[1]]
test <- d[ind,]
train <- d[-ind,]
ann <- neuralnet( f,data=train,hidden=c(6,7,6),
lifesign = 'full',
threshold=0.1,stepmax = 10)
predicted_ <- compute(ann, test[,1:length(test)-1], rep = 1)
predicted <- predicted_
predicted <- ifelse( predicted_$net.result < 0, 0,1)
conf <- table(predicted,test$income)
auc<-auc(test$income,predicted)
if(auc > maxi){
annmax <- ann
max = auc
}
}
for (i in 1:10) {
ind <- folds[[1]]
test <- d[ind,]
train <- d[-ind,]
ann <- neuralnet( f,data=train,hidden=c(6,7,6),
lifesign = 'full',
threshold=0.1,stepmax = 100)
predicted_ <- compute(ann, test[,1:length(test)-1], rep = 1)
predicted <- predicted_
predicted <- ifelse( predicted_$net.result < 0, 0,1)
conf <- table(predicted,test$income)
auc<-auc(test$income,predicted)
if(auc > maxi){
annmax <- ann
max = auc
}
}
for (i in 1:10) {
ind <- folds[[1]]
test <- d[ind,]
train <- d[-ind,]
ann <- neuralnet( f,data=train,hidden=c(6,7,6),
lifesign = 'full',
threshold=0.1,stepmax = 10000)
predicted_ <- compute(ann, test[,1:length(test)-1], rep = 1)
predicted <- predicted_
predicted <- ifelse( predicted_$net.result < 0, 0,1)
conf <- table(predicted,test$income)
auc<-auc(test$income,predicted)
if(auc > maxi){
annmax <- ann
max = auc
}
}
for (i in 1:10) {
ind <- folds[[1]]
test <- d[ind,]
train <- d[-ind,]
ann <- neuralnet( f,data=train,hidden=c(6,7,6),
lifesign = 'full',
threshold=0.1,stepmax = 5000)
predicted_ <- compute(ann, test[,1:length(test)-1], rep = 1)
predicted <- predicted_
predicted <- ifelse( predicted_$net.result < 0, 0,1)
conf <- table(predicted,test$income)
auc<-auc(test$income,predicted)
if(auc > maxi){
annmax <- ann
max = auc
}
}
ann <- neuralnet( f,data=train,hidden=c(6,7,6),
lifesign = 'full',
threshold=0.1,rep=10)
ann <- neuralnet( f,data=train,hidden=c(6,7),
lifesign = 'full',
threshold=0.1,rep=10)
plot(annmax)
ann <- neuralnet( f,data=train,hidden=c(10),
lifesign = 'full',
threshold=0.1,rep=10)
ann <- neuralnet( f,data=train,hidden=c(5),
lifesign = 'full',
threshold=0.1,rep=10)
plot(ann)
plot(ann$[[1]])
plot(ann)
plot(ann)
predicted_ <- compute(ann, test[,1:length(test)-1], rep = 1)
#summary(predicted_$net.result)
predicted <- predicted_
predicted <- ifelse( predicted_$net.result < 0, 0,1)
cat("Confusion Matrix","\n")
conf <- table(predicted,test$income)
print(conf)
acc <- sum(diag(conf))/sum(conf)
cat("Accuracy",acc,"\n")
rec <- conf[1,1]/sum(conf[1,])
cat("Recall",rec,"\n")
pre <- conf[1,1]/sum(conf[,1])
cat("Precision",pre,"\n")
f_s <- 2*conf[1,1]/(2*conf[1,1] + conf[1,2] + conf[2,1])
cat("F_Score",f_s,"\n")
auc<-auc(test$income,predicted)
plot(roc(test$income,predicted))
cat("AUC",auc,"\n")
rm(list = ls())
