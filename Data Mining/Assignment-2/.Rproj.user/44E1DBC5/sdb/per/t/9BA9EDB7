{
    "collab_server" : "",
    "contents" : "#--------------------------------------------------------------------\n#library(doMC)\n#library(doParallel)\n#registerDoMC(cores=3)\n\nwhile (dev.cur() > 1) dev.off()\nrm(list = ls())\nmatr <- function(model){\n  predicted <- predict(model, test, type = 'prob')\n  pred=ifelse((predicted[,1]<predicted[,2]), \"Low\",\"High\")\n  #print(confusionMatrix(pred, test$income ))\n  conf <- table(pred,test$income)\n  cat(\"Confusion Matrix\",\"\\n\")\n  print(conf)\n  r=recall(as.factor(pred), test$income)\n  p=precision(as.factor(pred), test$income)\n  cat(\"Accuracy\",sum(diag(conf))/sum(conf),\"\\n\")\n  cat(\"Recall\",recall(as.factor(pred), test$income),\"\\n\")\n  cat(\"Precision\",precision(as.factor(pred), test$income),\"\\n\")\n  cat(\"F-Score\",(2*r*p)/(r+p),\"\\n\")\n  pred <- predict(model, test, type = 'prob')\n  auc<-auc(test$income,predicted[,2])\n  plot(roc(test$income,predicted[,2]))\n  cat(\"AUC\",auc,\"\\n\")\n}\nprepro <- function(data){\n  data$type_employer = as.character(data$type_employer) \n  data$occupation = as.character(data$occupation) \n  data$country = as.character(data$country) \n  #data$education = as.character(data$education) \n  data$race = as.character(data$race) \n  data$marital = as.character(data$marital) \n  data$marital[data$marital==\"Never-married\"] = \"Never-Married\" \n  data$marital[data$marital==\"Married-AF-spouse\"] = \"Married\" \n  data$marital[data$marital==\"Married-civ-spouse\"] = \"Married\" \n  data$marital[data$marital==\"Married-spouse-absent\"] = \"Not-Married\" \n  data$marital[data$marital==\"Separated\"] = \"Not-Married\" \n  data$marital[data$marital==\"Divorced\"] = \"Not-Married\" \n  data$marital[data$marital==\"Widowed\"] = \"Widowed\" \n  data$country[data$country==\"Cambodia\"] = \"SE-Asia\" # blocking Country of Origin \n  data$country[data$country==\"Canada\"] = \"British-Commonwealth\" \n  data$country[data$country==\"China\"] = \"China\" \n  data$country[data$country==\"Columbia\"] = \"South-America\"\n  data$country[data$country==\"Cuba\"] = \"Other\"\n  data$country[data$country==\"Dominican-Republic\"] = \"Latin-America\"\n  data$country[data$country==\"Ecuador\"] = \"South-America\"\n  data$country[data$country==\"El-Salvador\"] = \"South-America\"\n  data$country[data$country==\"England\"] = \"British-Commonwealth\"\n  data$country[data$country==\"France\"] = \"Euro_1\"\n  data$country[data$country==\"Germany\"] = \"Euro_1\"\n  data$country[data$country==\"Greece\"] = \"Euro_2\"\n  data$country[data$country==\"Guatemala\"] = \"Latin-America\"\n  data$country[data$country==\"Haiti\"] = \"Latin-America\"\n  data$country[data$country==\"Holand-Netherlands\"] = \"Euro_1\"\n  data$country[data$country==\"Honduras\"] = \"Latin-America\"\n  data$country[data$country==\"Hong\"] = \"China\"\n  data$country[data$country==\"Hungary\"] = \"Euro_2\"\n  data$country[data$country==\"India\"] = \"British-Commonwealth\"\n  data$country[data$country==\"Iran\"] = \"Other\"\n  data$country[data$country==\"Ireland\"] = \"British-Commonwealth\"\n  data$country[data$country==\"Italy\"] = \"Euro_1\"\n  data$country[data$country==\"Jamaica\"] = \"Latin-America\"\n  data$country[data$country==\"Japan\"] = \"Other\"\n  data$country[data$country==\"Laos\"] = \"SE-Asia\"\n  data$country[data$country==\"Mexico\"] = \"Latin-America\"\n  data$country[data$country==\"Nicaragua\"] = \"Latin-America\"\n  data$country[data$country==\"Outlying-US(Guam-USVI-etc)\"] = \"Latin-America\"\n  data$country[data$country==\"Peru\"] = \"South-America\"\n  data$country[data$country==\"Philippines\"] = \"SE-Asia\"\n  data$country[data$country==\"Poland\"] = \"Euro_2\"\n  data$country[data$country==\"Portugal\"] = \"Euro_2\"\n  data$country[data$country==\"Puerto-Rico\"] = \"Latin-America\"\n  data$country[data$country==\"Scotland\"] = \"British-Commonwealth\"\n  data$country[data$country==\"South\"] = \"Euro_2\"\n  data$country[data$country==\"Taiwan\"] = \"China\"\n  data$country[data$country==\"Thailand\"] = \"SE-Asia\"\n  data$country[data$country==\"Trinadad&Tobago\"] = \"Latin-America\"\n  data$country[data$country==\"United-States\"] = \"United-States\"\n  data$country[data$country==\"Vietnam\"] = \"SE-Asia\"\n  data$country[data$country==\"Yugoslavia\"] = \"Euro_2\"\n  #data$education = gsub(\"^10th\",\"Dropout\",data$education)\n  #data$education = gsub(\"^11th\",\"Dropout\",data$education)\n  #data$education = gsub(\"^12th\",\"Dropout\",data$education)\n  #data$education = gsub(\"^1st-4th\",\"Dropout\",data$education)\n  #data$education = gsub(\"^5th-6th\",\"Dropout\",data$education)\n  #data$education = gsub(\"^7th-8th\",\"Dropout\",data$education)\n  #data$education = gsub(\"^9th\",\"Dropout\",data$education)\n  #data$education = gsub(\"^Assoc-acdm\",\"Associates\",data$education)\n  #data$education = gsub(\"^Assoc-voc\",\"Associates\",data$education)\n  #data$education = gsub(\"^Bachelors\",\"Bachelors\",data$education)\n  #data$education = gsub(\"^Doctorate\",\"Doctorate\",data$education)\n  #data$education = gsub(\"^HS-Grad\",\"HS-Graduate\",data$education)\n  #data$education = gsub(\"^Masters\",\"Masters\",data$education)\n  #data$education = gsub(\"^Preschool\",\"Dropout\",data$education)\n  #data$education = gsub(\"^Prof-school\",\"Prof-School\",data$education)\n  #data$education = gsub(\"^Some-college\",\"HS-Graduate\",data$education)\n  data$type_employer = gsub(\"^Federal-gov\",\"Federal-Govt\",data$type_employer)\n  data$type_employer = gsub(\"^Local-gov\",\"Other-Govt\",data$type_employer)\n  data$type_employer = gsub(\"^State-gov\",\"Other-Govt\",data$type_employer)\n  data$type_employer = gsub(\"^Private\",\"Private\",data$type_employer)\n  data$type_employer = gsub(\"^Self-emp-inc\",\"Self-Employed\",data$type_employer)\n  data$type_employer = gsub(\"^Self-emp-not-inc\",\"Self-Employed\",data$type_employer)\n  data$type_employer = gsub(\"^Without-pay\",\"Not-Working\",data$type_employer)\n  data$type_employer = gsub(\"^Never-worked\",\"Not-Working\",data$type_employer)\n  data$occupation = gsub(\"^Adm-clerical\",\"Admin\",data$occupation)\n  data$occupation = gsub(\"^Armed-Forces\",\"Military\",data$occupation)\n  data$occupation = gsub(\"^Craft-repair\",\"Blue-Collar\",data$occupation)\n  data$occupation = gsub(\"^Exec-managerial\",\"White-Collar\",data$occupation)\n  data$occupation = gsub(\"^Farming-fishing\",\"Blue-Collar\",data$occupation)\n  data$occupation = gsub(\"^Handlers-cleaners\",\"Blue-Collar\",data$occupation)\n  data$occupation = gsub(\"^Machine-op-inspct\",\"Blue-Collar\",data$occupation)\n  data$occupation = gsub(\"^Other-service\",\"Service\",data$occupation)\n  data$occupation = gsub(\"^Priv-house-serv\",\"Service\",data$occupation)\n  data$occupation = gsub(\"^Prof-specialty\",\"Professional\",data$occupation)\n  data$occupation = gsub(\"^Protective-serv\",\"Other-Occupations\",data$occupation)\n  data$occupation = gsub(\"^Sales\",\"Sales\",data$occupation)\n  data$occupation = gsub(\"^Tech-support\",\"Other-Occupations\",data$occupation)\n  data$occupation = gsub(\"^Transport-moving\",\"Blue-Collar\",data$occupation)\n  data$race[data$race==\"White\"] = \"White\"\n  data$race[data$race==\"Black\"] = \"Black\"\n  data$race[data$race==\"Amer-Indian-Eskimo\"] = \"Amer-Indian\"\n  data$race[data$race==\"Asian-Pac-Islander\"] = \"Asian\"\n  data$race[data$race==\"Other\"] = \"Other\"\n}\nlibrary(readr)\nlibrary(rpart)\nlibrary(rpart.plot)\nlibrary(caret)\nlibrary(pROC)\nlibrary(neuralnet)\n#detach(\"package:pROC\", unload=TRUE)\n\nset.seed(1234)\n#---------------------------------------------------------------------\ndata <- read_csv(\"data.csv\")\ndata <- data[1:10000,]\ndata[sapply(data, is.character)] <- lapply(data[sapply(data, is.character)], as.factor)\n#View(data)\n#summary(data)\n#head(data)\n#str(data)\n#--------------------------------------------------------------------\n#80:20 with sampling\nintrain <- createDataPartition(y = data$income, p = 0.8, list = FALSE)\ntrain <- data[intrain,]\ntest <- data[-intrain,]\n\n#10-fold\nfold <- trainControl(method=\"repeatedcv\", number = 10,repeats = 1,\n                     verboseIter = TRUE,\n                     #                     savePredictions = TRUE\n)\nratio <- trainControl(verboseIter = TRUE,\n                      #                      savePredictions = TRUE,\n                      number = 5\n)\n#-----------------------------------------------------------------\n#models\n#info,gini\n#tree_ent <- rpart(income~., train_ratio, method = \"class\", minsplit = 2, minbucket = 1,\n#                  parms = list(split = \"gini\"))\n#rpart.plot(tree_ent)\n\n#entropy  \nprint(\"MODELS\")\nprint(\"Entropy\")\nent_ratio <- train(income~., data = train, method = \"rpart\",\n                   parms = list(split = \"information\"),\n                   trControl = ratio,\n                   tuneLength = 10)\nprp(ent_ratio$finalModel, box.palette = \"Reds\")\nprint(\"Entropy with 80:20\")\nmatr(ent_ratio)\nent_fold <- train(income~., data = data, method = \"rpart\",\n                  parms = list(split = \"information\"),\n                  trControl = fold,\n                  tuneLength = 10)\nprp(ent_fold$finalModel, box.palette = \"Reds\")\nprint(\"Entropy with 10-fold\")\nmatr(ent_fold)\n\n#gini\ngini_ratio <- train(income~., data = train, method = \"rpart\",\n                    parms = list(split = \"gini\"),\n                    trControl = ratio,\n                    tuneLength = 10)\nprp(gini_ratio$finalModel, box.palette = \"Reds\")\nprint(\"gini with 80:20\")\nmatr(gini_ratio)\ngini_fold <- train(income~., data = data, method = \"rpart\",\n                   parms = list(split = \"gini\"),\n                   trControl = fold,\n                   tuneLength = 10)\nprp(gini_fold$finalModel, box.palette = \"Reds\")\nprint(\"gini with fold\")\nmatr(gini_fold)\n\n#Naive Bayes\nnb_ratio <- train(income~., data = train,\n                  method = \"naive_bayes\",\n                  trControl = ratio,\n                  tuneLength = 10)\n#not_correct...prp(nb_ratio$finalModel, box.palette = \"Reds\")\n#many plots...plot(nb_ratio$finalModel)\nprint(\"NB with ratio\")\nmatr(nb_ratio$finalModel)\n\nnb_fold <- train(income~., data = data,\n                 method = \"naive_bayes\",\n                 trControl = fold,\n                 tuneLength = 10)\n#not_correct...prp(nb_fold$finalModel, box.palette = \"Reds\")\n#many plots...plot(nb_fold$finalModel)\nprint(\"NB with fold\")\nmatr(nb_fold$finalModel)\nnb_fold$finalModel\n#ANN\nprepro(data)\n\n#-------------------------------------------------------------------\ndata$income <- NULL\n\n",
    "created" : 1509291947137.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "7|24|24|0|\n25|25|123|0|\n",
    "hash" : "888039365",
    "id" : "9BA9EDB7",
    "lastKnownWriteTime" : 1509292048,
    "last_content_update" : 1509292048912,
    "path" : "~/Link to R/Assignment-2/final.R",
    "project_path" : "final.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}